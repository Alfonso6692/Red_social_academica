/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Recurso;
import modelo.Usuario;
import servicios.ServicioRecursos;

public class VentanaRecursos extends javax.swing.JFrame {

    private final Usuario usuarioLogueado;
    private DefaultTableModel tableModel;
    private java.util.List<Recurso> listaDeRecursos; // Para guardar los objetos completos

    public VentanaRecursos(Usuario usuario) {
        this.usuarioLogueado = usuario;
        initComponents();

        this.setTitle("Recursos Educativos");
        this.setLocationRelativeTo(null);

        inicializarTabla();
        cargarRecursos();
    }

    private void inicializarTabla() {

        tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; //hace que la tabla no sea editable
            }
        };
        tableModel.addColumn("Título");
        tableModel.addColumn("Tipo");
        tableModel.addColumn("Subido por");
        tableModel.addColumn("Fecha");
        tableModel.addColumn("Estado");
        tablaRecursos.setModel(tableModel);
    }

    private void cargarRecursos() {
        tableModel.setRowCount(0);
        ServicioRecursos servicio = new ServicioRecursos();
        try {
            // --- CAMBIA ESTA LÍNEA ---
            // Llama al nuevo método que solo trae los recursos públicos
            java.util.List<Recurso> recursos = servicio.obtenerRecursosPublicos();

            // El resto del método para llenar la tabla sigue igual
            for (Recurso r : recursos) {
                Object[] fila = new Object[5];
                fila[0] = r.getTitulo();
                fila[1] = r.getTipoArchivo();
                fila[2] = r.getUsuario().getNombre() + " " + r.getUsuario().getApellido();
                fila[3] = r.getFechaPublicacion().toString();
                fila[4] = r.isEsPrivado() ? "Privado" : "Público";
                tableModel.addRow(fila);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar recursos: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaRecursos = new javax.swing.JTable();
        botonSubir = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        botonHacerPrivado = new javax.swing.JButton();
        botonHacerPublico = new javax.swing.JButton();
        botonVerPrivados = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tablaRecursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane2.setViewportView(tablaRecursos);

        jScrollPane1.setViewportView(jScrollPane2);

        botonSubir.setText("Subir Nuevo Recurso");
        botonSubir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSubirActionPerformed(evt);
            }
        });

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        botonHacerPrivado.setText("Hacer Privado");
        botonHacerPrivado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonHacerPrivadoActionPerformed(evt);
            }
        });

        botonHacerPublico.setText("Hacer Público");
        botonHacerPublico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonHacerPublicoActionPerformed(evt);
            }
        });

        botonVerPrivados.setText("Ver mis recursos privados");
        botonVerPrivados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerPrivadosActionPerformed(evt);
            }
        });

        botonEliminar.setText("Eliminar");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonVerPrivados))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(botonSubir)
                        .addGap(28, 28, 28)
                        .addComponent(btnCerrar)
                        .addGap(18, 18, 18)
                        .addComponent(botonHacerPrivado)
                        .addGap(18, 18, 18)
                        .addComponent(botonHacerPublico)
                        .addGap(52, 52, 52)
                        .addComponent(botonEliminar)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(botonVerPrivados)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonSubir)
                        .addComponent(btnCerrar)
                        .addComponent(botonHacerPrivado)
                        .addComponent(botonHacerPublico))
                    .addComponent(botonEliminar))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void botonSubirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSubirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int resultado = fileChooser.showOpenDialog(this);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = fileChooser.getSelectedFile();
            String titulo = JOptionPane.showInputDialog(this, "Introduce un título para el recurso:");

            if (titulo == null || titulo.trim().isEmpty()) {
                return; // El usuario canceló
            }

            // CORRECCIÓN: Preguntar al usuario si el recurso es privado
            int opcionPrivado = JOptionPane.showConfirmDialog(this, "¿Desea que este recurso sea privado?", "Visibilidad del Recurso", JOptionPane.YES_NO_OPTION);
            boolean esPrivado = (opcionPrivado == JOptionPane.YES_OPTION);

            try {
                Path directorioDestino = Paths.get("recursos_compartidos");
                if (!Files.exists(directorioDestino)) {
                    Files.createDirectories(directorioDestino);
                }
                Path destino = directorioDestino.resolve(archivoSeleccionado.getName());
                Files.copy(archivoSeleccionado.toPath(), destino, StandardCopyOption.REPLACE_EXISTING);

                ServicioRecursos servicio = new ServicioRecursos();
                String tipo = archivoSeleccionado.getName().substring(archivoSeleccionado.getName().lastIndexOf(".") + 1);

                servicio.subirRecurso(titulo, "", archivoSeleccionado.getName(), tipo, this.usuarioLogueado, esPrivado);

                JOptionPane.showMessageDialog(this, "Recurso subido con éxito.");
                cargarRecursos(); // Actualizar la tabla

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al subir el archivo: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_botonSubirActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.dispose(); // Cierra únicamente esta ventana
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void botonHacerPrivadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonHacerPrivadoActionPerformed

        cambiarVisibilidadRecurso(true); // Llama a un método común con 'true' para privado
    }//GEN-LAST:event_botonHacerPrivadoActionPerformed

    private void botonHacerPublicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonHacerPublicoActionPerformed
        cambiarVisibilidadRecurso(false); // Llama a un método común con 'false' para privado
    }//GEN-LAST:event_botonHacerPublicoActionPerformed

    private void botonVerPrivadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerPrivadosActionPerformed
        new VentanaRecursosPrivados(this.usuarioLogueado).setVisible(true);
    }//GEN-LAST:event_botonVerPrivadosActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        int filaSeleccionada = tablaRecursos.getSelectedRow();

        // 1. Verificar que se haya seleccionado un recurso
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un recurso de la tabla para eliminar.");
            return;
        }

        // 2. Obtener el recurso seleccionado
        Recurso recursoSeleccionado = this.listaDeRecursos.get(filaSeleccionada);

        // 3. Verificación de seguridad: solo el dueño del recurso puede eliminarlo
        if (!recursoSeleccionado.getUsuario().getId().equals(this.usuarioLogueado.getId())) {
            JOptionPane.showMessageDialog(this, "No puedes eliminar un recurso que no te pertenece.", "Acción no permitida", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 4. Pedir confirmación al usuario
        int confirmacion = JOptionPane.showConfirmDialog(this,
                "¿Estás seguro de que deseas eliminar el recurso '" + recursoSeleccionado.getTitulo() + "'?\nEsta acción no se puede deshacer.",
                "Confirmar Eliminación",
                JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // 5. Llamar al servicio para eliminar el recurso
                ServicioRecursos servicio = new ServicioRecursos();
                servicio.eliminarRecurso(recursoSeleccionado);

                JOptionPane.showMessageDialog(this, "Recurso eliminado con éxito.");

                // 6. Recargar la tabla para que el cambio se refleje
                cargarRecursos();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al eliminar el recurso: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void cambiarVisibilidadRecurso(boolean esPrivado) {
        int filaSeleccionada = tablaRecursos.getSelectedRow();

        // 1. Verifica si se seleccionó una fila
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un recurso de la tabla.");
            return;
        }

        // 2. Obtiene el recurso seleccionado de tu lista de respaldo
        // (Asegúrate de tener la variable 'listaDeRecursos' en tu clase)
        Recurso recursoSeleccionado = this.listaDeRecursos.get(filaSeleccionada);

        // 3. Verificación de seguridad: solo el dueño puede cambiar la visibilidad
        if (!recursoSeleccionado.getUsuario().getId().equals(this.usuarioLogueado.getId())) {
            JOptionPane.showMessageDialog(this, "No puedes cambiar la visibilidad de un recurso que no te pertenece.", "Acción no permitida", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 4. Llama al servicio para actualizar la base de datos
        try {
            ServicioRecursos servicio = new ServicioRecursos();
            servicio.cambiarVisibilidad(recursoSeleccionado.getId(), esPrivado);

            String estado = esPrivado ? "privado" : "público";
            JOptionPane.showMessageDialog(this, "El recurso ahora es " + estado + ".");

            cargarRecursos(); // Recargar la tabla para reflejar el cambio

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cambiar la visibilidad: " + e.getMessage());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonHacerPrivado;
    private javax.swing.JButton botonHacerPublico;
    private javax.swing.JButton botonSubir;
    private javax.swing.JButton botonVerPrivados;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaRecursos;
    // End of variables declaration//GEN-END:variables
}
